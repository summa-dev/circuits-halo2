// SPDX-License-Identifier: MIT
    pragma solidity ^0.8.17;

    contract Verifier {
        function verify(
            uint256[] memory pubInputs,
            bytes memory proof
        ) public view returns (bool) {
            bool success = true;
            bytes32[720] memory transcript;
            assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(add(transcript, 0x20), mod(mload(add(pubInputs, 0x20)), f_q))mstore(add(transcript, 0x40), mod(mload(add(pubInputs, 0x40)), f_q))mstore(add(transcript, 0x60), mod(mload(add(pubInputs, 0x60)), f_q))mstore(add(transcript, 0x0), 821352827657531962249154653806934303147776281800710478434642835633404617682)        {            let x := mload(add(proof, 0x20))            mstore(add(transcript, 0x80), x)            let y := mload(add(proof, 0x40))            mstore(add(transcript, 0xa0), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0x60))            mstore(add(transcript, 0xc0), x)            let y := mload(add(proof, 0x80))            mstore(add(transcript, 0xe0), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0xa0))            mstore(add(transcript, 0x100), x)            let y := mload(add(proof, 0xc0))            mstore(add(transcript, 0x120), y)            success := and(validate_ec_point(x, y), success)        }mstore(add(transcript, 0x140), keccak256(add(transcript, 0x0), 320)){            let hash := mload(add(transcript, 0x140))            mstore(add(transcript, 0x160), mod(hash, f_q))            mstore(add(transcript, 0x180), hash)        }mstore8(add(transcript, 0x1a0), 1)mstore(add(transcript, 0x1a0), keccak256(add(transcript, 0x180), 33)){            let hash := mload(add(transcript, 0x1a0))            mstore(add(transcript, 0x1c0), mod(hash, f_q))            mstore(add(transcript, 0x1e0), hash)        }mstore8(add(transcript, 0x200), 1)mstore(add(transcript, 0x200), keccak256(add(transcript, 0x1e0), 33)){            let hash := mload(add(transcript, 0x200))            mstore(add(transcript, 0x220), mod(hash, f_q))            mstore(add(transcript, 0x240), hash)        }        {            let x := mload(add(proof, 0xe0))            mstore(add(transcript, 0x260), x)            let y := mload(add(proof, 0x100))            mstore(add(transcript, 0x280), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0x120))            mstore(add(transcript, 0x2a0), x)            let y := mload(add(proof, 0x140))            mstore(add(transcript, 0x2c0), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0x160))            mstore(add(transcript, 0x2e0), x)            let y := mload(add(proof, 0x180))            mstore(add(transcript, 0x300), y)            success := and(validate_ec_point(x, y), success)        }mstore(add(transcript, 0x320), keccak256(add(transcript, 0x240), 224)){            let hash := mload(add(transcript, 0x320))            mstore(add(transcript, 0x340), mod(hash, f_q))            mstore(add(transcript, 0x360), hash)        }        {            let x := mload(add(proof, 0x1a0))            mstore(add(transcript, 0x380), x)            let y := mload(add(proof, 0x1c0))            mstore(add(transcript, 0x3a0), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0x1e0))            mstore(add(transcript, 0x3c0), x)            let y := mload(add(proof, 0x200))            mstore(add(transcript, 0x3e0), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0x220))            mstore(add(transcript, 0x400), x)            let y := mload(add(proof, 0x240))            mstore(add(transcript, 0x420), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0x260))            mstore(add(transcript, 0x440), x)            let y := mload(add(proof, 0x280))            mstore(add(transcript, 0x460), y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(add(proof, 0x2a0))            mstore(add(transcript, 0x480), x)            let y := mload(add(proof, 0x2c0))            mstore(add(transcript, 0x4a0), y)            success := and(validate_ec_point(x, y), success)        }mstore(add(transcript, 0x4c0), keccak256(add(transcript, 0x360), 352)){            let hash := mload(add(transcript, 0x4c0))            mstore(add(transcript, 0x4e0), mod(hash, f_q))            mstore(add(transcript, 0x500), hash)        }mstore(add(transcript, 0x520), mod(mload(add(proof, 0x2e0)), f_q))mstore(add(transcript, 0x540), mod(mload(add(proof, 0x300)), f_q))mstore(add(transcript, 0x560), mod(mload(add(proof, 0x320)), f_q))mstore(add(transcript, 0x580), mod(mload(add(proof, 0x340)), f_q))mstore(add(transcript, 0x5a0), mod(mload(add(proof, 0x360)), f_q))mstore(add(transcript, 0x5c0), mod(mload(add(proof, 0x380)), f_q))mstore(add(transcript, 0x5e0), mod(mload(add(proof, 0x3a0)), f_q))mstore(add(transcript, 0x600), mod(mload(add(proof, 0x3c0)), f_q))mstore(add(transcript, 0x620), mod(mload(add(proof, 0x3e0)), f_q))mstore(add(transcript, 0x640), mod(mload(add(proof, 0x400)), f_q))mstore(add(transcript, 0x660), mod(mload(add(proof, 0x420)), f_q))mstore(add(transcript, 0x680), mod(mload(add(proof, 0x440)), f_q))mstore(add(transcript, 0x6a0), mod(mload(add(proof, 0x460)), f_q))mstore(add(transcript, 0x6c0), mod(mload(add(proof, 0x480)), f_q))mstore(add(transcript, 0x6e0), mod(mload(add(proof, 0x4a0)), f_q))mstore(add(transcript, 0x700), mod(mload(add(proof, 0x4c0)), f_q))mstore(add(transcript, 0x720), mod(mload(add(proof, 0x4e0)), f_q))mstore(add(transcript, 0x740), mod(mload(add(proof, 0x500)), f_q))mstore(add(transcript, 0x760), mod(mload(add(proof, 0x520)), f_q))mstore(add(transcript, 0x780), mod(mload(add(proof, 0x540)), f_q))mstore(add(transcript, 0x7a0), mod(mload(add(proof, 0x560)), f_q))mstore(add(transcript, 0x7c0), mod(mload(add(proof, 0x580)), f_q))mstore(add(transcript, 0x7e0), mod(mload(add(proof, 0x5a0)), f_q))mstore(add(transcript, 0x800), mod(mload(add(proof, 0x5c0)), f_q))mstore(add(transcript, 0x820), mod(mload(add(proof, 0x5e0)), f_q))mstore(add(transcript, 0x840), mod(mload(add(proof, 0x600)), f_q))mstore(add(transcript, 0x860), keccak256(add(transcript, 0x500), 864)){            let hash := mload(add(transcript, 0x860))            mstore(add(transcript, 0x880), mod(hash, f_q))            mstore(add(transcript, 0x8a0), hash)        }mstore8(add(transcript, 0x8c0), 1)mstore(add(transcript, 0x8c0), keccak256(add(transcript, 0x8a0), 33)){            let hash := mload(add(transcript, 0x8c0))            mstore(add(transcript, 0x8e0), mod(hash, f_q))            mstore(add(transcript, 0x900), hash)        }        {            let x := mload(add(proof, 0x620))            mstore(add(transcript, 0x920), x)            let y := mload(add(proof, 0x640))            mstore(add(transcript, 0x940), y)            success := and(validate_ec_point(x, y), success)        }mstore(add(transcript, 0x960), keccak256(add(transcript, 0x900), 96)){            let hash := mload(add(transcript, 0x960))            mstore(add(transcript, 0x980), mod(hash, f_q))            mstore(add(transcript, 0x9a0), hash)        }        {            let x := mload(add(proof, 0x660))            mstore(add(transcript, 0x9c0), x)            let y := mload(add(proof, 0x680))            mstore(add(transcript, 0x9e0), y)            success := and(validate_ec_point(x, y), success)        }mstore(add(transcript, 0xa00), mulmod(mload(add(transcript, 0x4e0)), mload(add(transcript, 0x4e0)), f_q))mstore(add(transcript, 0xa20), mulmod(mload(add(transcript, 0xa00)), mload(add(transcript, 0xa00)), f_q))mstore(add(transcript, 0xa40), mulmod(mload(add(transcript, 0xa20)), mload(add(transcript, 0xa20)), f_q))mstore(add(transcript, 0xa60), mulmod(mload(add(transcript, 0xa40)), mload(add(transcript, 0xa40)), f_q))mstore(add(transcript, 0xa80), mulmod(mload(add(transcript, 0xa60)), mload(add(transcript, 0xa60)), f_q))mstore(add(transcript, 0xaa0), mulmod(mload(add(transcript, 0xa80)), mload(add(transcript, 0xa80)), f_q))mstore(add(transcript, 0xac0), mulmod(mload(add(transcript, 0xaa0)), mload(add(transcript, 0xaa0)), f_q))mstore(add(transcript, 0xae0), mulmod(mload(add(transcript, 0xac0)), mload(add(transcript, 0xac0)), f_q))mstore(add(transcript, 0xb00), mulmod(mload(add(transcript, 0xae0)), mload(add(transcript, 0xae0)), f_q))mstore(add(transcript, 0xb20), mulmod(mload(add(transcript, 0xb00)), mload(add(transcript, 0xb00)), f_q))mstore(add(transcript, 0xb40), mulmod(mload(add(transcript, 0xb20)), mload(add(transcript, 0xb20)), f_q))mstore(add(transcript, 0xb60), addmod(mload(add(transcript, 0xb40)), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(add(transcript, 0xb80), mulmod(mload(add(transcript, 0xb60)), 21877555253249509951141793242451973684696534144361143701928820297812832026625, f_q))mstore(add(transcript, 0xba0), mulmod(mload(add(transcript, 0xb80)), 15699029810934084314820646074566828280617789951162923449200398535581206172418, f_q))mstore(add(transcript, 0xbc0), addmod(mload(add(transcript, 0x4e0)), 6189213060905190907425759670690446807930574449253110894497805650994602323199, f_q))mstore(add(transcript, 0xbe0), mulmod(mload(add(transcript, 0xb80)), 16553167948716468074998850291160946772606011499093267774599468837293218566225, f_q))mstore(add(transcript, 0xc00), addmod(mload(add(transcript, 0x4e0)), 5335074923122807147247555454096328315942352901322766569098735349282589929392, f_q))mstore(add(transcript, 0xc20), mulmod(mload(add(transcript, 0xb80)), 4260969412351770314333984243767775737437927068151180798236715529158398853173, f_q))mstore(add(transcript, 0xc40), addmod(mload(add(transcript, 0x4e0)), 17627273459487504907912421501489499351110437332264853545461488657417409642444, f_q))mstore(add(transcript, 0xc60), mulmod(mload(add(transcript, 0xb80)), 18302882236472339419631414285403968768409802182737928837767912484847322191909, f_q))mstore(add(transcript, 0xc80), addmod(mload(add(transcript, 0x4e0)), 3585360635366935802614991459853306320138562217678105505930291701728486303708, f_q))mstore(add(transcript, 0xca0), mulmod(mload(add(transcript, 0xb80)), 4925592601992654644734291590386747644864797672605745962807370354577123815907, f_q))mstore(add(transcript, 0xcc0), addmod(mload(add(transcript, 0x4e0)), 16962650269846620577512114154870527443683566727810288380890833831998684679710, f_q))mstore(add(transcript, 0xce0), mulmod(mload(add(transcript, 0xb80)), 19444693496467964793333684482470811869395409953158764080291550423779334624794, f_q))mstore(add(transcript, 0xd00), addmod(mload(add(transcript, 0x4e0)), 2443549375371310428912721262786463219152954447257270263406653762796473870823, f_q))mstore(add(transcript, 0xd20), mulmod(mload(add(transcript, 0xb80)), 1, f_q))mstore(add(transcript, 0xd40), addmod(mload(add(transcript, 0x4e0)), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(add(transcript, 0xd60), mulmod(mload(add(transcript, 0xb80)), 9396103202274256930945606623206526900461945684265495839012435492634193195103, f_q))mstore(add(transcript, 0xd80), addmod(mload(add(transcript, 0x4e0)), 12492139669565018291300799122050748188086418716150538504685768693941615300514, f_q))mstore(add(transcript, 0xda0), mulmod(mload(add(transcript, 0xb80)), 19380560087801265747114831706136320509424814679569278834391540198888293317501, f_q))mstore(add(transcript, 0xdc0), addmod(mload(add(transcript, 0x4e0)), 2507682784038009475131574039120954579123549720846755509306663987687515178116, f_q)){            let prod := mload(add(transcript, 0xbc0))                prod := mulmod(mload(add(transcript, 0xc00)), prod, f_q)                mstore(add(transcript, 0xde0), prod)                            prod := mulmod(mload(add(transcript, 0xc40)), prod, f_q)                mstore(add(transcript, 0xe00), prod)                            prod := mulmod(mload(add(transcript, 0xc80)), prod, f_q)                mstore(add(transcript, 0xe20), prod)                            prod := mulmod(mload(add(transcript, 0xcc0)), prod, f_q)                mstore(add(transcript, 0xe40), prod)                            prod := mulmod(mload(add(transcript, 0xd00)), prod, f_q)                mstore(add(transcript, 0xe60), prod)                            prod := mulmod(mload(add(transcript, 0xd40)), prod, f_q)                mstore(add(transcript, 0xe80), prod)                            prod := mulmod(mload(add(transcript, 0xd80)), prod, f_q)                mstore(add(transcript, 0xea0), prod)                            prod := mulmod(mload(add(transcript, 0xdc0)), prod, f_q)                mstore(add(transcript, 0xec0), prod)                            prod := mulmod(mload(add(transcript, 0xb60)), prod, f_q)                mstore(add(transcript, 0xee0), prod)                    }mstore(add(transcript, 0xf20), 32)mstore(add(transcript, 0xf40), 32)mstore(add(transcript, 0xf60), 32)mstore(add(transcript, 0xf80), mload(add(transcript, 0xee0)))mstore(add(transcript, 0xfa0), 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(add(transcript, 0xfc0), 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, add(transcript, 0xf20), 0xc0, add(transcript, 0xf00), 0x20), 1), success){                        let inv := mload(add(transcript, 0xf00))            let v                            v := mload(add(transcript, 0xb60))                    mstore(add(transcript, 0xb60), mulmod(mload(add(transcript, 0xec0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xdc0))                    mstore(add(transcript, 0xdc0), mulmod(mload(add(transcript, 0xea0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xd80))                    mstore(add(transcript, 0xd80), mulmod(mload(add(transcript, 0xe80)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xd40))                    mstore(add(transcript, 0xd40), mulmod(mload(add(transcript, 0xe60)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xd00))                    mstore(add(transcript, 0xd00), mulmod(mload(add(transcript, 0xe40)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xcc0))                    mstore(add(transcript, 0xcc0), mulmod(mload(add(transcript, 0xe20)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xc80))                    mstore(add(transcript, 0xc80), mulmod(mload(add(transcript, 0xe00)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xc40))                    mstore(add(transcript, 0xc40), mulmod(mload(add(transcript, 0xde0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0xc00))                    mstore(add(transcript, 0xc00), mulmod(mload(add(transcript, 0xbc0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(add(transcript, 0xbc0), inv)        }mstore(add(transcript, 0xfe0), mulmod(mload(add(transcript, 0xba0)), mload(add(transcript, 0xbc0)), f_q))mstore(add(transcript, 0x1000), mulmod(mload(add(transcript, 0xbe0)), mload(add(transcript, 0xc00)), f_q))mstore(add(transcript, 0x1020), mulmod(mload(add(transcript, 0xc20)), mload(add(transcript, 0xc40)), f_q))mstore(add(transcript, 0x1040), mulmod(mload(add(transcript, 0xc60)), mload(add(transcript, 0xc80)), f_q))mstore(add(transcript, 0x1060), mulmod(mload(add(transcript, 0xca0)), mload(add(transcript, 0xcc0)), f_q))mstore(add(transcript, 0x1080), mulmod(mload(add(transcript, 0xce0)), mload(add(transcript, 0xd00)), f_q))mstore(add(transcript, 0x10a0), mulmod(mload(add(transcript, 0xd20)), mload(add(transcript, 0xd40)), f_q))mstore(add(transcript, 0x10c0), mulmod(mload(add(transcript, 0xd60)), mload(add(transcript, 0xd80)), f_q))mstore(add(transcript, 0x10e0), mulmod(mload(add(transcript, 0xda0)), mload(add(transcript, 0xdc0)), f_q)){            let result := mulmod(mload(add(transcript, 0x10a0)), mload(add(transcript, 0x20)), f_q)result := addmod(mulmod(mload(add(transcript, 0x10c0)), mload(add(transcript, 0x40)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x10e0)), mload(add(transcript, 0x60)), f_q), result, f_q)mstore(add(transcript, 0x1100), result)        }mstore(add(transcript, 0x1120), addmod(mload(add(transcript, 0x520)), mload(add(transcript, 0x640)), f_q))mstore(add(transcript, 0x1140), mulmod(mload(add(transcript, 0x1120)), mload(add(transcript, 0x1120)), f_q))mstore(add(transcript, 0x1160), mulmod(mload(add(transcript, 0x1140)), mload(add(transcript, 0x1140)), f_q))mstore(add(transcript, 0x1180), mulmod(mload(add(transcript, 0x1120)), mload(add(transcript, 0x1160)), f_q))mstore(add(transcript, 0x11a0), mulmod(mload(add(transcript, 0x1180)), 2910766817845651019878574839501801340070030115151021261302834310722729507541, f_q))mstore(add(transcript, 0x11c0), addmod(mload(add(transcript, 0x540)), mload(add(transcript, 0x660)), f_q))mstore(add(transcript, 0x11e0), mulmod(mload(add(transcript, 0x11c0)), mload(add(transcript, 0x11c0)), f_q))mstore(add(transcript, 0x1200), mulmod(mload(add(transcript, 0x11e0)), mload(add(transcript, 0x11e0)), f_q))mstore(add(transcript, 0x1220), mulmod(mload(add(transcript, 0x11c0)), mload(add(transcript, 0x1200)), f_q))mstore(add(transcript, 0x1240), mulmod(mload(add(transcript, 0x1220)), 19727366863391167538122140361473584127147630672623100827934084310230022599144, f_q))mstore(add(transcript, 0x1260), addmod(mload(add(transcript, 0x11a0)), mload(add(transcript, 0x1240)), f_q))mstore(add(transcript, 0x1280), addmod(mload(add(transcript, 0x1260)), sub(f_q, mload(add(transcript, 0x560))), f_q))mstore(add(transcript, 0x12a0), mulmod(mload(add(transcript, 0x1280)), mload(add(transcript, 0x6a0)), f_q))mstore(add(transcript, 0x12c0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x12a0)), f_q))mstore(add(transcript, 0x12e0), mulmod(mload(add(transcript, 0x1180)), 5776684794125549462448597414050232243778680302179439492664047328281728356345, f_q))mstore(add(transcript, 0x1300), mulmod(mload(add(transcript, 0x1220)), 8348174920934122550483593999453880006756108121341067172388445916328941978568, f_q))mstore(add(transcript, 0x1320), addmod(mload(add(transcript, 0x12e0)), mload(add(transcript, 0x1300)), f_q))mstore(add(transcript, 0x1340), addmod(mload(add(transcript, 0x1320)), sub(f_q, mload(add(transcript, 0x580))), f_q))mstore(add(transcript, 0x1360), mulmod(mload(add(transcript, 0x1340)), mload(add(transcript, 0x6a0)), f_q))mstore(add(transcript, 0x1380), addmod(mload(add(transcript, 0x12c0)), mload(add(transcript, 0x1360)), f_q))mstore(add(transcript, 0x13a0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1380)), f_q))mstore(add(transcript, 0x13c0), addmod(mload(add(transcript, 0x1180)), sub(f_q, mload(add(transcript, 0x5a0))), f_q))mstore(add(transcript, 0x13e0), mulmod(mload(add(transcript, 0x13c0)), mload(add(transcript, 0x6c0)), f_q))mstore(add(transcript, 0x1400), addmod(mload(add(transcript, 0x13a0)), mload(add(transcript, 0x13e0)), f_q))mstore(add(transcript, 0x1420), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1400)), f_q))mstore(add(transcript, 0x1440), mulmod(mload(add(transcript, 0x5a0)), 2910766817845651019878574839501801340070030115151021261302834310722729507541, f_q))mstore(add(transcript, 0x1460), mulmod(mload(add(transcript, 0x11c0)), 19727366863391167538122140361473584127147630672623100827934084310230022599144, f_q))mstore(add(transcript, 0x1480), addmod(mload(add(transcript, 0x1440)), mload(add(transcript, 0x1460)), f_q))mstore(add(transcript, 0x14a0), addmod(mload(add(transcript, 0x1480)), mload(add(transcript, 0x600)), f_q))mstore(add(transcript, 0x14c0), mulmod(mload(add(transcript, 0x14a0)), mload(add(transcript, 0x14a0)), f_q))mstore(add(transcript, 0x14e0), mulmod(mload(add(transcript, 0x14c0)), mload(add(transcript, 0x14c0)), f_q))mstore(add(transcript, 0x1500), mulmod(mload(add(transcript, 0x14a0)), mload(add(transcript, 0x14e0)), f_q))mstore(add(transcript, 0x1520), mulmod(mload(add(transcript, 0x560)), 8897705321156975119607866206188469715432233408805434913352778521345836531302, f_q))mstore(add(transcript, 0x1540), mulmod(mload(add(transcript, 0x580)), 13897810991298242824030978581179475767377101082166056046492926701399149797630, f_q))mstore(add(transcript, 0x1560), addmod(mload(add(transcript, 0x1520)), mload(add(transcript, 0x1540)), f_q))mstore(add(transcript, 0x1580), addmod(mload(add(transcript, 0x1500)), sub(f_q, mload(add(transcript, 0x1560))), f_q))mstore(add(transcript, 0x15a0), mulmod(mload(add(transcript, 0x1580)), mload(add(transcript, 0x6c0)), f_q))mstore(add(transcript, 0x15c0), addmod(mload(add(transcript, 0x1420)), mload(add(transcript, 0x15a0)), f_q))mstore(add(transcript, 0x15e0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x15c0)), f_q))mstore(add(transcript, 0x1600), mulmod(mload(add(transcript, 0x5a0)), 5776684794125549462448597414050232243778680302179439492664047328281728356345, f_q))mstore(add(transcript, 0x1620), mulmod(mload(add(transcript, 0x11c0)), 8348174920934122550483593999453880006756108121341067172388445916328941978568, f_q))mstore(add(transcript, 0x1640), addmod(mload(add(transcript, 0x1600)), mload(add(transcript, 0x1620)), f_q))mstore(add(transcript, 0x1660), addmod(mload(add(transcript, 0x1640)), mload(add(transcript, 0x620)), f_q))mstore(add(transcript, 0x1680), mulmod(mload(add(transcript, 0x560)), 7127083008168878795310303301757642617203533252990949589494537404444738046722, f_q))mstore(add(transcript, 0x16a0), mulmod(mload(add(transcript, 0x580)), 10251091711782631878897995303436082826711938358699127319815611151510940403902, f_q))mstore(add(transcript, 0x16c0), addmod(mload(add(transcript, 0x1680)), mload(add(transcript, 0x16a0)), f_q))mstore(add(transcript, 0x16e0), addmod(mload(add(transcript, 0x1660)), sub(f_q, mload(add(transcript, 0x16c0))), f_q))mstore(add(transcript, 0x1700), mulmod(mload(add(transcript, 0x16e0)), mload(add(transcript, 0x6c0)), f_q))mstore(add(transcript, 0x1720), addmod(mload(add(transcript, 0x15e0)), mload(add(transcript, 0x1700)), f_q))mstore(add(transcript, 0x1740), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1720)), f_q))mstore(add(transcript, 0x1760), addmod(1, sub(f_q, mload(add(transcript, 0x680))), f_q))mstore(add(transcript, 0x1780), mulmod(mload(add(transcript, 0x1760)), mload(add(transcript, 0x680)), f_q))mstore(add(transcript, 0x17a0), addmod(2, sub(f_q, mload(add(transcript, 0x680))), f_q))mstore(add(transcript, 0x17c0), mulmod(mload(add(transcript, 0x17a0)), mload(add(transcript, 0x1780)), f_q))mstore(add(transcript, 0x17e0), addmod(mload(add(transcript, 0x5e0)), mload(add(transcript, 0x520)), f_q))mstore(add(transcript, 0x1800), addmod(mload(add(transcript, 0x17e0)), sub(f_q, mload(add(transcript, 0x560))), f_q))mstore(add(transcript, 0x1820), mulmod(mload(add(transcript, 0x1800)), mload(add(transcript, 0x17c0)), f_q))mstore(add(transcript, 0x1840), addmod(mload(add(transcript, 0x1740)), mload(add(transcript, 0x1820)), f_q))mstore(add(transcript, 0x1860), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1840)), f_q))mstore(add(transcript, 0x1880), addmod(mload(add(transcript, 0x5c0)), sub(f_q, mload(add(transcript, 0x580))), f_q))mstore(add(transcript, 0x18a0), mulmod(mload(add(transcript, 0x1880)), mload(add(transcript, 0x17c0)), f_q))mstore(add(transcript, 0x18c0), addmod(mload(add(transcript, 0x1860)), mload(add(transcript, 0x18a0)), f_q))mstore(add(transcript, 0x18e0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x18c0)), f_q))mstore(add(transcript, 0x1900), mulmod(mload(add(transcript, 0x17a0)), mload(add(transcript, 0x680)), f_q))mstore(add(transcript, 0x1920), addmod(3, sub(f_q, mload(add(transcript, 0x680))), f_q))mstore(add(transcript, 0x1940), mulmod(mload(add(transcript, 0x1920)), mload(add(transcript, 0x1900)), f_q))mstore(add(transcript, 0x1960), mulmod(mload(add(transcript, 0x5a0)), mload(add(transcript, 0x1940)), f_q))mstore(add(transcript, 0x1980), addmod(1, sub(f_q, mload(add(transcript, 0x5a0))), f_q))mstore(add(transcript, 0x19a0), mulmod(mload(add(transcript, 0x1980)), mload(add(transcript, 0x1960)), f_q))mstore(add(transcript, 0x19c0), addmod(mload(add(transcript, 0x18e0)), mload(add(transcript, 0x19a0)), f_q))mstore(add(transcript, 0x19e0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x19c0)), f_q))mstore(add(transcript, 0x1a00), addmod(mload(add(transcript, 0x560)), sub(f_q, mload(add(transcript, 0x520))), f_q))mstore(add(transcript, 0x1a20), addmod(mload(add(transcript, 0x540)), sub(f_q, mload(add(transcript, 0x580))), f_q))mstore(add(transcript, 0x1a40), addmod(mload(add(transcript, 0x1a00)), sub(f_q, mload(add(transcript, 0x1a20))), f_q))mstore(add(transcript, 0x1a60), mulmod(mload(add(transcript, 0x1a40)), mload(add(transcript, 0x1960)), f_q))mstore(add(transcript, 0x1a80), addmod(mload(add(transcript, 0x19e0)), mload(add(transcript, 0x1a60)), f_q))mstore(add(transcript, 0x1aa0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1a80)), f_q))mstore(add(transcript, 0x1ac0), mulmod(mload(add(transcript, 0x1920)), mload(add(transcript, 0x1780)), f_q))mstore(add(transcript, 0x1ae0), addmod(mload(add(transcript, 0x520)), mload(add(transcript, 0x540)), f_q))mstore(add(transcript, 0x1b00), addmod(mload(add(transcript, 0x1ae0)), sub(f_q, mload(add(transcript, 0x5a0))), f_q))mstore(add(transcript, 0x1b20), mulmod(mload(add(transcript, 0x1b00)), mload(add(transcript, 0x1ac0)), f_q))mstore(add(transcript, 0x1b40), addmod(mload(add(transcript, 0x1aa0)), mload(add(transcript, 0x1b20)), f_q))mstore(add(transcript, 0x1b60), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1b40)), f_q))mstore(add(transcript, 0x1b80), addmod(mload(add(transcript, 0x1b60)), mload(add(transcript, 0x1b20)), f_q))mstore(add(transcript, 0x1ba0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1b80)), f_q))mstore(add(transcript, 0x1bc0), addmod(1, sub(f_q, mload(add(transcript, 0x7c0))), f_q))mstore(add(transcript, 0x1be0), mulmod(mload(add(transcript, 0x1bc0)), mload(add(transcript, 0x10a0)), f_q))mstore(add(transcript, 0x1c00), addmod(mload(add(transcript, 0x1ba0)), mload(add(transcript, 0x1be0)), f_q))mstore(add(transcript, 0x1c20), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1c00)), f_q))mstore(add(transcript, 0x1c40), mulmod(mload(add(transcript, 0x820)), mload(add(transcript, 0x820)), f_q))mstore(add(transcript, 0x1c60), addmod(mload(add(transcript, 0x1c40)), sub(f_q, mload(add(transcript, 0x820))), f_q))mstore(add(transcript, 0x1c80), mulmod(mload(add(transcript, 0x1c60)), mload(add(transcript, 0xfe0)), f_q))mstore(add(transcript, 0x1ca0), addmod(mload(add(transcript, 0x1c20)), mload(add(transcript, 0x1c80)), f_q))mstore(add(transcript, 0x1cc0), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1ca0)), f_q))mstore(add(transcript, 0x1ce0), addmod(mload(add(transcript, 0x820)), sub(f_q, mload(add(transcript, 0x800))), f_q))mstore(add(transcript, 0x1d00), mulmod(mload(add(transcript, 0x1ce0)), mload(add(transcript, 0x10a0)), f_q))mstore(add(transcript, 0x1d20), addmod(mload(add(transcript, 0x1cc0)), mload(add(transcript, 0x1d00)), f_q))mstore(add(transcript, 0x1d40), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x1d20)), f_q))mstore(add(transcript, 0x1d60), addmod(1, sub(f_q, mload(add(transcript, 0xfe0))), f_q))mstore(add(transcript, 0x1d80), addmod(mload(add(transcript, 0x1000)), mload(add(transcript, 0x1020)), f_q))mstore(add(transcript, 0x1da0), addmod(mload(add(transcript, 0x1d80)), mload(add(transcript, 0x1040)), f_q))mstore(add(transcript, 0x1dc0), addmod(mload(add(transcript, 0x1da0)), mload(add(transcript, 0x1060)), f_q))mstore(add(transcript, 0x1de0), addmod(mload(add(transcript, 0x1dc0)), mload(add(transcript, 0x1080)), f_q))mstore(add(transcript, 0x1e00), addmod(mload(add(transcript, 0x1d60)), sub(f_q, mload(add(transcript, 0x1de0))), f_q))mstore(add(transcript, 0x1e20), mulmod(mload(add(transcript, 0x700)), mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x1e40), addmod(mload(add(transcript, 0x600)), mload(add(transcript, 0x1e20)), f_q))mstore(add(transcript, 0x1e60), addmod(mload(add(transcript, 0x1e40)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x1e80), mulmod(mload(add(transcript, 0x720)), mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x1ea0), addmod(mload(add(transcript, 0x520)), mload(add(transcript, 0x1e80)), f_q))mstore(add(transcript, 0x1ec0), addmod(mload(add(transcript, 0x1ea0)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x1ee0), mulmod(mload(add(transcript, 0x1ec0)), mload(add(transcript, 0x1e60)), f_q))mstore(add(transcript, 0x1f00), mulmod(mload(add(transcript, 0x740)), mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x1f20), addmod(mload(add(transcript, 0x540)), mload(add(transcript, 0x1f00)), f_q))mstore(add(transcript, 0x1f40), addmod(mload(add(transcript, 0x1f20)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x1f60), mulmod(mload(add(transcript, 0x1f40)), mload(add(transcript, 0x1ee0)), f_q))mstore(add(transcript, 0x1f80), mulmod(mload(add(transcript, 0x760)), mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x1fa0), addmod(mload(add(transcript, 0x620)), mload(add(transcript, 0x1f80)), f_q))mstore(add(transcript, 0x1fc0), addmod(mload(add(transcript, 0x1fa0)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x1fe0), mulmod(mload(add(transcript, 0x1fc0)), mload(add(transcript, 0x1f60)), f_q))mstore(add(transcript, 0x2000), mulmod(mload(add(transcript, 0x1fe0)), mload(add(transcript, 0x7e0)), f_q))mstore(add(transcript, 0x2020), mulmod(1, mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x2040), mulmod(mload(add(transcript, 0x4e0)), mload(add(transcript, 0x2020)), f_q))mstore(add(transcript, 0x2060), addmod(mload(add(transcript, 0x600)), mload(add(transcript, 0x2040)), f_q))mstore(add(transcript, 0x2080), addmod(mload(add(transcript, 0x2060)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x20a0), mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x20c0), mulmod(mload(add(transcript, 0x4e0)), mload(add(transcript, 0x20a0)), f_q))mstore(add(transcript, 0x20e0), addmod(mload(add(transcript, 0x520)), mload(add(transcript, 0x20c0)), f_q))mstore(add(transcript, 0x2100), addmod(mload(add(transcript, 0x20e0)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x2120), mulmod(mload(add(transcript, 0x2100)), mload(add(transcript, 0x2080)), f_q))mstore(add(transcript, 0x2140), mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x2160), mulmod(mload(add(transcript, 0x4e0)), mload(add(transcript, 0x2140)), f_q))mstore(add(transcript, 0x2180), addmod(mload(add(transcript, 0x540)), mload(add(transcript, 0x2160)), f_q))mstore(add(transcript, 0x21a0), addmod(mload(add(transcript, 0x2180)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x21c0), mulmod(mload(add(transcript, 0x21a0)), mload(add(transcript, 0x2120)), f_q))mstore(add(transcript, 0x21e0), mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x2200), mulmod(mload(add(transcript, 0x4e0)), mload(add(transcript, 0x21e0)), f_q))mstore(add(transcript, 0x2220), addmod(mload(add(transcript, 0x620)), mload(add(transcript, 0x2200)), f_q))mstore(add(transcript, 0x2240), addmod(mload(add(transcript, 0x2220)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x2260), mulmod(mload(add(transcript, 0x2240)), mload(add(transcript, 0x21c0)), f_q))mstore(add(transcript, 0x2280), mulmod(mload(add(transcript, 0x2260)), mload(add(transcript, 0x7c0)), f_q))mstore(add(transcript, 0x22a0), addmod(mload(add(transcript, 0x2000)), sub(f_q, mload(add(transcript, 0x2280))), f_q))mstore(add(transcript, 0x22c0), mulmod(mload(add(transcript, 0x22a0)), mload(add(transcript, 0x1e00)), f_q))mstore(add(transcript, 0x22e0), addmod(mload(add(transcript, 0x1d40)), mload(add(transcript, 0x22c0)), f_q))mstore(add(transcript, 0x2300), mulmod(mload(add(transcript, 0x340)), mload(add(transcript, 0x22e0)), f_q))mstore(add(transcript, 0x2320), mulmod(mload(add(transcript, 0x780)), mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x2340), addmod(mload(add(transcript, 0x5a0)), mload(add(transcript, 0x2320)), f_q))mstore(add(transcript, 0x2360), addmod(mload(add(transcript, 0x2340)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x2380), mulmod(mload(add(transcript, 0x7a0)), mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x23a0), addmod(mload(add(transcript, 0x1100)), mload(add(transcript, 0x2380)), f_q))mstore(add(transcript, 0x23c0), addmod(mload(add(transcript, 0x23a0)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x23e0), mulmod(mload(add(transcript, 0x23c0)), mload(add(transcript, 0x2360)), f_q))mstore(add(transcript, 0x2400), mulmod(mload(add(transcript, 0x23e0)), mload(add(transcript, 0x840)), f_q))mstore(add(transcript, 0x2420), mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x2440), mulmod(mload(add(transcript, 0x4e0)), mload(add(transcript, 0x2420)), f_q))mstore(add(transcript, 0x2460), addmod(mload(add(transcript, 0x5a0)), mload(add(transcript, 0x2440)), f_q))mstore(add(transcript, 0x2480), addmod(mload(add(transcript, 0x2460)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x24a0), mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(add(transcript, 0x1c0)), f_q))mstore(add(transcript, 0x24c0), mulmod(mload(add(transcript, 0x4e0)), mload(add(transcript, 0x24a0)), f_q))mstore(add(transcript, 0x24e0), addmod(mload(add(transcript, 0x1100)), mload(add(transcript, 0x24c0)), f_q))mstore(add(transcript, 0x2500), addmod(mload(add(transcript, 0x24e0)), mload(add(transcript, 0x220)), f_q))mstore(add(transcript, 0x2520), mulmod(mload(add(transcript, 0x2500)), mload(add(transcript, 0x2480)), f_q))mstore(add(transcript, 0x2540), mulmod(mload(add(transcript, 0x2520)), mload(add(transcript, 0x820)), f_q))mstore(add(transcript, 0x2560), addmod(mload(add(transcript, 0x2400)), sub(f_q, mload(add(transcript, 0x2540))), f_q))mstore(add(transcript, 0x2580), mulmod(mload(add(transcript, 0x2560)), mload(add(transcript, 0x1e00)), f_q))mstore(add(transcript, 0x25a0), addmod(mload(add(transcript, 0x2300)), mload(add(transcript, 0x2580)), f_q))mstore(add(transcript, 0x25c0), mulmod(mload(add(transcript, 0xb40)), mload(add(transcript, 0xb40)), f_q))mstore(add(transcript, 0x25e0), mulmod(mload(add(transcript, 0x25c0)), mload(add(transcript, 0xb40)), f_q))mstore(add(transcript, 0x2600), mulmod(mload(add(transcript, 0x25e0)), mload(add(transcript, 0xb40)), f_q))mstore(add(transcript, 0x2620), mulmod(mload(add(transcript, 0x2600)), mload(add(transcript, 0xb40)), f_q))mstore(add(transcript, 0x2640), mulmod(1, mload(add(transcript, 0xb40)), f_q))mstore(add(transcript, 0x2660), mulmod(1, mload(add(transcript, 0x25c0)), f_q))mstore(add(transcript, 0x2680), mulmod(1, mload(add(transcript, 0x25e0)), f_q))mstore(add(transcript, 0x26a0), mulmod(1, mload(add(transcript, 0x2600)), f_q))mstore(add(transcript, 0x26c0), mulmod(mload(add(transcript, 0x25a0)), mload(add(transcript, 0xb60)), f_q))mstore(add(transcript, 0x26e0), mulmod(mload(add(transcript, 0xa00)), mload(add(transcript, 0x4e0)), f_q))mstore(add(transcript, 0x2700), mulmod(mload(add(transcript, 0x4e0)), 1, f_q))mstore(add(transcript, 0x2720), addmod(mload(add(transcript, 0x980)), sub(f_q, mload(add(transcript, 0x2700))), f_q))mstore(add(transcript, 0x2740), mulmod(mload(add(transcript, 0x4e0)), 9396103202274256930945606623206526900461945684265495839012435492634193195103, f_q))mstore(add(transcript, 0x2760), addmod(mload(add(transcript, 0x980)), sub(f_q, mload(add(transcript, 0x2740))), f_q))mstore(add(transcript, 0x2780), mulmod(mload(add(transcript, 0x4e0)), 15699029810934084314820646074566828280617789951162923449200398535581206172418, f_q))mstore(add(transcript, 0x27a0), addmod(mload(add(transcript, 0x980)), sub(f_q, mload(add(transcript, 0x2780))), f_q))mstore(add(transcript, 0x27c0), mulmod(mload(add(transcript, 0x4e0)), 19444693496467964793333684482470811869395409953158764080291550423779334624794, f_q))mstore(add(transcript, 0x27e0), addmod(mload(add(transcript, 0x980)), sub(f_q, mload(add(transcript, 0x27c0))), f_q)){            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0xa00)), 14935689044936328720213520384837211407239373163407808768092422456738089171339, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0xa00)), 6952553826902946502032885360420063681308991237008225575605781729837719324278, f_q), f_q), result, f_q)mstore(add(transcript, 0x2800), result)        }{            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0xa00)), 7540907510155698387256503820143330389809914548046512731972450943457626251574, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0xa00)), 17454089668527239794105182244994964593641145239866915085378986192780276655988, f_q), f_q), result, f_q)mstore(add(transcript, 0x2820), result)        }{            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0xa00)), 16765245179638222004592619476379737764479697804128512065226459610007790881832, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0xa00)), 6067403861988280018436561787453590745850405443026581205331008293509136248791, f_q), f_q), result, f_q)mstore(add(transcript, 0x2840), result)        }mstore(add(transcript, 0x2860), mulmod(1, mload(add(transcript, 0x2720)), f_q))mstore(add(transcript, 0x2880), mulmod(mload(add(transcript, 0x2860)), mload(add(transcript, 0x2760)), f_q))mstore(add(transcript, 0x28a0), mulmod(mload(add(transcript, 0x2880)), mload(add(transcript, 0x27e0)), f_q)){            let result := mulmod(mload(add(transcript, 0x980)), 1, f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)mstore(add(transcript, 0x28c0), result)        }{            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0xa00)), 13346277807347402051479003338644866680074640264080882830084838995653627694322, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0xa00)), 8541965064491873170767402406612408408473724136335151513613365190922180801295, f_q), f_q), result, f_q)mstore(add(transcript, 0x28e0), result)        }{            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0xa00)), 9130318747744625055991020866335675116974647447373438669980034404542087728591, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0xa00)), 17654030801727560324741115319652541746559479525075366613702001578587072243451, f_q), f_q), result, f_q)mstore(add(transcript, 0x2900), result)        }{            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0xa00)), 8968217942074169282201771672973351205073655055696863512223304343263448008755, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0xa00)), 15489683287416706862113636648384499783884413315698913841173435408703605255719, f_q), f_q), result, f_q)mstore(add(transcript, 0x2920), result)        }mstore(add(transcript, 0x2940), mulmod(mload(add(transcript, 0x2880)), mload(add(transcript, 0x27a0)), f_q)){            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0x4e0)), 12492139669565018291300799122050748188086418716150538504685768693941615300515, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0x4e0)), 9396103202274256930945606623206526900461945684265495839012435492634193195102, f_q), f_q), result, f_q)mstore(add(transcript, 0x2960), result)        }{            let result := mulmod(mload(add(transcript, 0x980)), mulmod(mload(add(transcript, 0x4e0)), 9396103202274256930945606623206526900461945684265495839012435492634193195102, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e0)), mulmod(mload(add(transcript, 0x4e0)), 11903785986312266406077180662327481479585495405112251348319099480321708373219, f_q), f_q), result, f_q)mstore(add(transcript, 0x2980), result)        }{            let prod := mload(add(transcript, 0x2800))                prod := mulmod(mload(add(transcript, 0x2820)), prod, f_q)                mstore(add(transcript, 0x29a0), prod)                            prod := mulmod(mload(add(transcript, 0x2840)), prod, f_q)                mstore(add(transcript, 0x29c0), prod)                            prod := mulmod(mload(add(transcript, 0x28c0)), prod, f_q)                mstore(add(transcript, 0x29e0), prod)                            prod := mulmod(mload(add(transcript, 0x2860)), prod, f_q)                mstore(add(transcript, 0x2a00), prod)                            prod := mulmod(mload(add(transcript, 0x28e0)), prod, f_q)                mstore(add(transcript, 0x2a20), prod)                            prod := mulmod(mload(add(transcript, 0x2900)), prod, f_q)                mstore(add(transcript, 0x2a40), prod)                            prod := mulmod(mload(add(transcript, 0x2920)), prod, f_q)                mstore(add(transcript, 0x2a60), prod)                            prod := mulmod(mload(add(transcript, 0x2940)), prod, f_q)                mstore(add(transcript, 0x2a80), prod)                            prod := mulmod(mload(add(transcript, 0x2960)), prod, f_q)                mstore(add(transcript, 0x2aa0), prod)                            prod := mulmod(mload(add(transcript, 0x2980)), prod, f_q)                mstore(add(transcript, 0x2ac0), prod)                            prod := mulmod(mload(add(transcript, 0x2880)), prod, f_q)                mstore(add(transcript, 0x2ae0), prod)                    }mstore(add(transcript, 0x2b20), 32)mstore(add(transcript, 0x2b40), 32)mstore(add(transcript, 0x2b60), 32)mstore(add(transcript, 0x2b80), mload(add(transcript, 0x2ae0)))mstore(add(transcript, 0x2ba0), 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(add(transcript, 0x2bc0), 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, add(transcript, 0x2b20), 0xc0, add(transcript, 0x2b00), 0x20), 1), success){                        let inv := mload(add(transcript, 0x2b00))            let v                            v := mload(add(transcript, 0x2880))                    mstore(add(transcript, 0x2880), mulmod(mload(add(transcript, 0x2ac0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2980))                    mstore(add(transcript, 0x2980), mulmod(mload(add(transcript, 0x2aa0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2960))                    mstore(add(transcript, 0x2960), mulmod(mload(add(transcript, 0x2a80)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2940))                    mstore(add(transcript, 0x2940), mulmod(mload(add(transcript, 0x2a60)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2920))                    mstore(add(transcript, 0x2920), mulmod(mload(add(transcript, 0x2a40)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2900))                    mstore(add(transcript, 0x2900), mulmod(mload(add(transcript, 0x2a20)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x28e0))                    mstore(add(transcript, 0x28e0), mulmod(mload(add(transcript, 0x2a00)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2860))                    mstore(add(transcript, 0x2860), mulmod(mload(add(transcript, 0x29e0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x28c0))                    mstore(add(transcript, 0x28c0), mulmod(mload(add(transcript, 0x29c0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2840))                    mstore(add(transcript, 0x2840), mulmod(mload(add(transcript, 0x29a0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2820))                    mstore(add(transcript, 0x2820), mulmod(mload(add(transcript, 0x2800)), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(add(transcript, 0x2800), inv)        }{            let result := mload(add(transcript, 0x2800))result := addmod(mload(add(transcript, 0x2820)), result, f_q)result := addmod(mload(add(transcript, 0x2840)), result, f_q)mstore(add(transcript, 0x2be0), result)        }mstore(add(transcript, 0x2c00), mulmod(mload(add(transcript, 0x28a0)), mload(add(transcript, 0x2860)), f_q)){            let result := mload(add(transcript, 0x28c0))mstore(add(transcript, 0x2c20), result)        }mstore(add(transcript, 0x2c40), mulmod(mload(add(transcript, 0x28a0)), mload(add(transcript, 0x2940)), f_q)){            let result := mload(add(transcript, 0x28e0))result := addmod(mload(add(transcript, 0x2900)), result, f_q)result := addmod(mload(add(transcript, 0x2920)), result, f_q)mstore(add(transcript, 0x2c60), result)        }mstore(add(transcript, 0x2c80), mulmod(mload(add(transcript, 0x28a0)), mload(add(transcript, 0x2880)), f_q)){            let result := mload(add(transcript, 0x2960))result := addmod(mload(add(transcript, 0x2980)), result, f_q)mstore(add(transcript, 0x2ca0), result)        }{            let prod := mload(add(transcript, 0x2be0))                prod := mulmod(mload(add(transcript, 0x2c20)), prod, f_q)                mstore(add(transcript, 0x2cc0), prod)                            prod := mulmod(mload(add(transcript, 0x2c60)), prod, f_q)                mstore(add(transcript, 0x2ce0), prod)                            prod := mulmod(mload(add(transcript, 0x2ca0)), prod, f_q)                mstore(add(transcript, 0x2d00), prod)                    }mstore(add(transcript, 0x2d40), 32)mstore(add(transcript, 0x2d60), 32)mstore(add(transcript, 0x2d80), 32)mstore(add(transcript, 0x2da0), mload(add(transcript, 0x2d00)))mstore(add(transcript, 0x2dc0), 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(add(transcript, 0x2de0), 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, add(transcript, 0x2d40), 0xc0, add(transcript, 0x2d20), 0x20), 1), success){                        let inv := mload(add(transcript, 0x2d20))            let v                            v := mload(add(transcript, 0x2ca0))                    mstore(add(transcript, 0x2ca0), mulmod(mload(add(transcript, 0x2ce0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2c60))                    mstore(add(transcript, 0x2c60), mulmod(mload(add(transcript, 0x2cc0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x2c20))                    mstore(add(transcript, 0x2c20), mulmod(mload(add(transcript, 0x2be0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(add(transcript, 0x2be0), inv)        }mstore(add(transcript, 0x2e00), mulmod(mload(add(transcript, 0x2c00)), mload(add(transcript, 0x2c20)), f_q))mstore(add(transcript, 0x2e20), mulmod(mload(add(transcript, 0x2c40)), mload(add(transcript, 0x2c60)), f_q))mstore(add(transcript, 0x2e40), mulmod(mload(add(transcript, 0x2c80)), mload(add(transcript, 0x2ca0)), f_q))mstore(add(transcript, 0x2e60), mulmod(mload(add(transcript, 0x880)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2e80), mulmod(mload(add(transcript, 0x2e60)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2ea0), mulmod(mload(add(transcript, 0x2e80)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2ec0), mulmod(mload(add(transcript, 0x2ea0)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2ee0), mulmod(mload(add(transcript, 0x2ec0)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2f00), mulmod(mload(add(transcript, 0x2ee0)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2f20), mulmod(mload(add(transcript, 0x2f00)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2f40), mulmod(mload(add(transcript, 0x2f20)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2f60), mulmod(mload(add(transcript, 0x2f40)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2f80), mulmod(mload(add(transcript, 0x2f60)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2fa0), mulmod(mload(add(transcript, 0x2f80)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2fc0), mulmod(mload(add(transcript, 0x2fa0)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x2fe0), mulmod(mload(add(transcript, 0x2fc0)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x3000), mulmod(mload(add(transcript, 0x2fe0)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x3020), mulmod(mload(add(transcript, 0x3000)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x3040), mulmod(mload(add(transcript, 0x8e0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3060), mulmod(mload(add(transcript, 0x3040)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3080), mulmod(mload(add(transcript, 0x3060)), mload(add(transcript, 0x8e0)), f_q)){            let result := mulmod(mload(add(transcript, 0x520)), mload(add(transcript, 0x2800)), f_q)result := addmod(mulmod(mload(add(transcript, 0x560)), mload(add(transcript, 0x2820)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x5e0)), mload(add(transcript, 0x2840)), f_q), result, f_q)mstore(add(transcript, 0x30a0), result)        }mstore(add(transcript, 0x30c0), mulmod(mload(add(transcript, 0x30a0)), mload(add(transcript, 0x2be0)), f_q))mstore(add(transcript, 0x30e0), mulmod(sub(f_q, mload(add(transcript, 0x30c0))), 1, f_q)){            let result := mulmod(mload(add(transcript, 0x540)), mload(add(transcript, 0x2800)), f_q)result := addmod(mulmod(mload(add(transcript, 0x580)), mload(add(transcript, 0x2820)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x5c0)), mload(add(transcript, 0x2840)), f_q), result, f_q)mstore(add(transcript, 0x3100), result)        }mstore(add(transcript, 0x3120), mulmod(mload(add(transcript, 0x3100)), mload(add(transcript, 0x2be0)), f_q))mstore(add(transcript, 0x3140), mulmod(sub(f_q, mload(add(transcript, 0x3120))), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x3160), mulmod(1, mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x3180), addmod(mload(add(transcript, 0x30e0)), mload(add(transcript, 0x3140)), f_q))mstore(add(transcript, 0x31a0), mulmod(mload(add(transcript, 0x3180)), 1, f_q))mstore(add(transcript, 0x31c0), mulmod(mload(add(transcript, 0x3160)), 1, f_q))mstore(add(transcript, 0x31e0), mulmod(1, mload(add(transcript, 0x2c00)), f_q)){            let result := mulmod(mload(add(transcript, 0x5a0)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3200), result)        }mstore(add(transcript, 0x3220), mulmod(mload(add(transcript, 0x3200)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3240), mulmod(sub(f_q, mload(add(transcript, 0x3220))), 1, f_q))mstore(add(transcript, 0x3260), mulmod(mload(add(transcript, 0x31e0)), 1, f_q)){            let result := mulmod(mload(add(transcript, 0x600)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3280), result)        }mstore(add(transcript, 0x32a0), mulmod(mload(add(transcript, 0x3280)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x32c0), mulmod(sub(f_q, mload(add(transcript, 0x32a0))), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x32e0), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x880)), f_q))mstore(add(transcript, 0x3300), addmod(mload(add(transcript, 0x3240)), mload(add(transcript, 0x32c0)), f_q)){            let result := mulmod(mload(add(transcript, 0x620)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3320), result)        }mstore(add(transcript, 0x3340), mulmod(mload(add(transcript, 0x3320)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3360), mulmod(sub(f_q, mload(add(transcript, 0x3340))), mload(add(transcript, 0x2e60)), f_q))mstore(add(transcript, 0x3380), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2e60)), f_q))mstore(add(transcript, 0x33a0), addmod(mload(add(transcript, 0x3300)), mload(add(transcript, 0x3360)), f_q)){            let result := mulmod(mload(add(transcript, 0x640)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x33c0), result)        }mstore(add(transcript, 0x33e0), mulmod(mload(add(transcript, 0x33c0)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3400), mulmod(sub(f_q, mload(add(transcript, 0x33e0))), mload(add(transcript, 0x2e80)), f_q))mstore(add(transcript, 0x3420), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2e80)), f_q))mstore(add(transcript, 0x3440), addmod(mload(add(transcript, 0x33a0)), mload(add(transcript, 0x3400)), f_q)){            let result := mulmod(mload(add(transcript, 0x660)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3460), result)        }mstore(add(transcript, 0x3480), mulmod(mload(add(transcript, 0x3460)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x34a0), mulmod(sub(f_q, mload(add(transcript, 0x3480))), mload(add(transcript, 0x2ea0)), f_q))mstore(add(transcript, 0x34c0), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2ea0)), f_q))mstore(add(transcript, 0x34e0), addmod(mload(add(transcript, 0x3440)), mload(add(transcript, 0x34a0)), f_q)){            let result := mulmod(mload(add(transcript, 0x680)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3500), result)        }mstore(add(transcript, 0x3520), mulmod(mload(add(transcript, 0x3500)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3540), mulmod(sub(f_q, mload(add(transcript, 0x3520))), mload(add(transcript, 0x2ec0)), f_q))mstore(add(transcript, 0x3560), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2ec0)), f_q))mstore(add(transcript, 0x3580), addmod(mload(add(transcript, 0x34e0)), mload(add(transcript, 0x3540)), f_q)){            let result := mulmod(mload(add(transcript, 0x6a0)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x35a0), result)        }mstore(add(transcript, 0x35c0), mulmod(mload(add(transcript, 0x35a0)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x35e0), mulmod(sub(f_q, mload(add(transcript, 0x35c0))), mload(add(transcript, 0x2ee0)), f_q))mstore(add(transcript, 0x3600), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2ee0)), f_q))mstore(add(transcript, 0x3620), addmod(mload(add(transcript, 0x3580)), mload(add(transcript, 0x35e0)), f_q)){            let result := mulmod(mload(add(transcript, 0x6c0)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3640), result)        }mstore(add(transcript, 0x3660), mulmod(mload(add(transcript, 0x3640)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3680), mulmod(sub(f_q, mload(add(transcript, 0x3660))), mload(add(transcript, 0x2f00)), f_q))mstore(add(transcript, 0x36a0), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2f00)), f_q))mstore(add(transcript, 0x36c0), addmod(mload(add(transcript, 0x3620)), mload(add(transcript, 0x3680)), f_q)){            let result := mulmod(mload(add(transcript, 0x700)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x36e0), result)        }mstore(add(transcript, 0x3700), mulmod(mload(add(transcript, 0x36e0)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3720), mulmod(sub(f_q, mload(add(transcript, 0x3700))), mload(add(transcript, 0x2f20)), f_q))mstore(add(transcript, 0x3740), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2f20)), f_q))mstore(add(transcript, 0x3760), addmod(mload(add(transcript, 0x36c0)), mload(add(transcript, 0x3720)), f_q)){            let result := mulmod(mload(add(transcript, 0x720)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3780), result)        }mstore(add(transcript, 0x37a0), mulmod(mload(add(transcript, 0x3780)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x37c0), mulmod(sub(f_q, mload(add(transcript, 0x37a0))), mload(add(transcript, 0x2f40)), f_q))mstore(add(transcript, 0x37e0), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2f40)), f_q))mstore(add(transcript, 0x3800), addmod(mload(add(transcript, 0x3760)), mload(add(transcript, 0x37c0)), f_q)){            let result := mulmod(mload(add(transcript, 0x740)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3820), result)        }mstore(add(transcript, 0x3840), mulmod(mload(add(transcript, 0x3820)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3860), mulmod(sub(f_q, mload(add(transcript, 0x3840))), mload(add(transcript, 0x2f60)), f_q))mstore(add(transcript, 0x3880), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2f60)), f_q))mstore(add(transcript, 0x38a0), addmod(mload(add(transcript, 0x3800)), mload(add(transcript, 0x3860)), f_q)){            let result := mulmod(mload(add(transcript, 0x760)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x38c0), result)        }mstore(add(transcript, 0x38e0), mulmod(mload(add(transcript, 0x38c0)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3900), mulmod(sub(f_q, mload(add(transcript, 0x38e0))), mload(add(transcript, 0x2f80)), f_q))mstore(add(transcript, 0x3920), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2f80)), f_q))mstore(add(transcript, 0x3940), addmod(mload(add(transcript, 0x38a0)), mload(add(transcript, 0x3900)), f_q)){            let result := mulmod(mload(add(transcript, 0x780)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3960), result)        }mstore(add(transcript, 0x3980), mulmod(mload(add(transcript, 0x3960)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x39a0), mulmod(sub(f_q, mload(add(transcript, 0x3980))), mload(add(transcript, 0x2fa0)), f_q))mstore(add(transcript, 0x39c0), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2fa0)), f_q))mstore(add(transcript, 0x39e0), addmod(mload(add(transcript, 0x3940)), mload(add(transcript, 0x39a0)), f_q)){            let result := mulmod(mload(add(transcript, 0x7a0)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3a00), result)        }mstore(add(transcript, 0x3a20), mulmod(mload(add(transcript, 0x3a00)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3a40), mulmod(sub(f_q, mload(add(transcript, 0x3a20))), mload(add(transcript, 0x2fc0)), f_q))mstore(add(transcript, 0x3a60), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2fc0)), f_q))mstore(add(transcript, 0x3a80), addmod(mload(add(transcript, 0x39e0)), mload(add(transcript, 0x3a40)), f_q))mstore(add(transcript, 0x3aa0), mulmod(mload(add(transcript, 0x2640)), mload(add(transcript, 0x2c00)), f_q))mstore(add(transcript, 0x3ac0), mulmod(mload(add(transcript, 0x2660)), mload(add(transcript, 0x2c00)), f_q))mstore(add(transcript, 0x3ae0), mulmod(mload(add(transcript, 0x2680)), mload(add(transcript, 0x2c00)), f_q))mstore(add(transcript, 0x3b00), mulmod(mload(add(transcript, 0x26a0)), mload(add(transcript, 0x2c00)), f_q)){            let result := mulmod(mload(add(transcript, 0x26c0)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3b20), result)        }mstore(add(transcript, 0x3b40), mulmod(mload(add(transcript, 0x3b20)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3b60), mulmod(sub(f_q, mload(add(transcript, 0x3b40))), mload(add(transcript, 0x2fe0)), f_q))mstore(add(transcript, 0x3b80), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x2fe0)), f_q))mstore(add(transcript, 0x3ba0), mulmod(mload(add(transcript, 0x3aa0)), mload(add(transcript, 0x2fe0)), f_q))mstore(add(transcript, 0x3bc0), mulmod(mload(add(transcript, 0x3ac0)), mload(add(transcript, 0x2fe0)), f_q))mstore(add(transcript, 0x3be0), mulmod(mload(add(transcript, 0x3ae0)), mload(add(transcript, 0x2fe0)), f_q))mstore(add(transcript, 0x3c00), mulmod(mload(add(transcript, 0x3b00)), mload(add(transcript, 0x2fe0)), f_q))mstore(add(transcript, 0x3c20), addmod(mload(add(transcript, 0x3a80)), mload(add(transcript, 0x3b60)), f_q)){            let result := mulmod(mload(add(transcript, 0x6e0)), mload(add(transcript, 0x28c0)), f_q)mstore(add(transcript, 0x3c40), result)        }mstore(add(transcript, 0x3c60), mulmod(mload(add(transcript, 0x3c40)), mload(add(transcript, 0x2e00)), f_q))mstore(add(transcript, 0x3c80), mulmod(sub(f_q, mload(add(transcript, 0x3c60))), mload(add(transcript, 0x3000)), f_q))mstore(add(transcript, 0x3ca0), mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x3000)), f_q))mstore(add(transcript, 0x3cc0), addmod(mload(add(transcript, 0x3c20)), mload(add(transcript, 0x3c80)), f_q))mstore(add(transcript, 0x3ce0), mulmod(mload(add(transcript, 0x3cc0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3d00), mulmod(mload(add(transcript, 0x3260)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3d20), mulmod(mload(add(transcript, 0x32e0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3d40), mulmod(mload(add(transcript, 0x3380)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3d60), mulmod(mload(add(transcript, 0x3420)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3d80), mulmod(mload(add(transcript, 0x34c0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3da0), mulmod(mload(add(transcript, 0x3560)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3dc0), mulmod(mload(add(transcript, 0x3600)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3de0), mulmod(mload(add(transcript, 0x36a0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3e00), mulmod(mload(add(transcript, 0x3740)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3e20), mulmod(mload(add(transcript, 0x37e0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3e40), mulmod(mload(add(transcript, 0x3880)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3e60), mulmod(mload(add(transcript, 0x3920)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3e80), mulmod(mload(add(transcript, 0x39c0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3ea0), mulmod(mload(add(transcript, 0x3a60)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3ec0), mulmod(mload(add(transcript, 0x3b80)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3ee0), mulmod(mload(add(transcript, 0x3ba0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3f00), mulmod(mload(add(transcript, 0x3bc0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3f20), mulmod(mload(add(transcript, 0x3be0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3f40), mulmod(mload(add(transcript, 0x3c00)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3f60), mulmod(mload(add(transcript, 0x3ca0)), mload(add(transcript, 0x8e0)), f_q))mstore(add(transcript, 0x3f80), addmod(mload(add(transcript, 0x31a0)), mload(add(transcript, 0x3ce0)), f_q))mstore(add(transcript, 0x3fa0), mulmod(1, mload(add(transcript, 0x2c40)), f_q)){            let result := mulmod(mload(add(transcript, 0x7c0)), mload(add(transcript, 0x28e0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x7e0)), mload(add(transcript, 0x2900)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x800)), mload(add(transcript, 0x2920)), f_q), result, f_q)mstore(add(transcript, 0x3fc0), result)        }mstore(add(transcript, 0x3fe0), mulmod(mload(add(transcript, 0x3fc0)), mload(add(transcript, 0x2e20)), f_q))mstore(add(transcript, 0x4000), mulmod(sub(f_q, mload(add(transcript, 0x3fe0))), 1, f_q))mstore(add(transcript, 0x4020), mulmod(mload(add(transcript, 0x3fa0)), 1, f_q))mstore(add(transcript, 0x4040), mulmod(mload(add(transcript, 0x4000)), mload(add(transcript, 0x3040)), f_q))mstore(add(transcript, 0x4060), mulmod(mload(add(transcript, 0x4020)), mload(add(transcript, 0x3040)), f_q))mstore(add(transcript, 0x4080), addmod(mload(add(transcript, 0x3f80)), mload(add(transcript, 0x4040)), f_q))mstore(add(transcript, 0x40a0), mulmod(1, mload(add(transcript, 0x2c80)), f_q)){            let result := mulmod(mload(add(transcript, 0x820)), mload(add(transcript, 0x2960)), f_q)result := addmod(mulmod(mload(add(transcript, 0x840)), mload(add(transcript, 0x2980)), f_q), result, f_q)mstore(add(transcript, 0x40c0), result)        }mstore(add(transcript, 0x40e0), mulmod(mload(add(transcript, 0x40c0)), mload(add(transcript, 0x2e40)), f_q))mstore(add(transcript, 0x4100), mulmod(sub(f_q, mload(add(transcript, 0x40e0))), 1, f_q))mstore(add(transcript, 0x4120), mulmod(mload(add(transcript, 0x40a0)), 1, f_q))mstore(add(transcript, 0x4140), mulmod(mload(add(transcript, 0x4100)), mload(add(transcript, 0x3060)), f_q))mstore(add(transcript, 0x4160), mulmod(mload(add(transcript, 0x4120)), mload(add(transcript, 0x3060)), f_q))mstore(add(transcript, 0x4180), addmod(mload(add(transcript, 0x4080)), mload(add(transcript, 0x4140)), f_q))mstore(add(transcript, 0x41a0), mulmod(1, mload(add(transcript, 0x28a0)), f_q))mstore(add(transcript, 0x41c0), mulmod(1, mload(add(transcript, 0x980)), f_q))mstore(add(transcript, 0x41e0), 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(add(transcript, 0x4200), 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(add(transcript, 0x4220), mload(add(transcript, 0x4180)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x41e0), 0x60, add(transcript, 0x41e0), 0x40), 1), success)mstore(add(transcript, 0x4240), mload(add(transcript, 0x41e0)))                    mstore(add(transcript, 0x4260), mload(add(transcript, 0x4200)))mstore(add(transcript, 0x4280), mload(add(transcript, 0x80)))                    mstore(add(transcript, 0x42a0), mload(add(transcript, 0xa0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4240), 0x80, add(transcript, 0x4240), 0x40), 1), success)mstore(add(transcript, 0x42c0), mload(add(transcript, 0xc0)))                    mstore(add(transcript, 0x42e0), mload(add(transcript, 0xe0)))mstore(add(transcript, 0x4300), mload(add(transcript, 0x31c0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x42c0), 0x60, add(transcript, 0x42c0), 0x40), 1), success)mstore(add(transcript, 0x4320), mload(add(transcript, 0x4240)))                    mstore(add(transcript, 0x4340), mload(add(transcript, 0x4260)))mstore(add(transcript, 0x4360), mload(add(transcript, 0x42c0)))                    mstore(add(transcript, 0x4380), mload(add(transcript, 0x42e0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4320), 0x80, add(transcript, 0x4320), 0x40), 1), success)mstore(add(transcript, 0x43a0), mload(add(transcript, 0x100)))                    mstore(add(transcript, 0x43c0), mload(add(transcript, 0x120)))mstore(add(transcript, 0x43e0), mload(add(transcript, 0x3d00)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x43a0), 0x60, add(transcript, 0x43a0), 0x40), 1), success)mstore(add(transcript, 0x4400), mload(add(transcript, 0x4320)))                    mstore(add(transcript, 0x4420), mload(add(transcript, 0x4340)))mstore(add(transcript, 0x4440), mload(add(transcript, 0x43a0)))                    mstore(add(transcript, 0x4460), mload(add(transcript, 0x43c0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4400), 0x80, add(transcript, 0x4400), 0x40), 1), success)mstore(add(transcript, 0x4480), 0x28ad161815d8340504ed638df60741f0e9337745857a05dbc23f5593f451a1a4)                    mstore(add(transcript, 0x44a0), 0x10308972febcb52a6dbfd318ee590df68f25192f964dd8bda2f0c53f589d8eca)mstore(add(transcript, 0x44c0), mload(add(transcript, 0x3d20)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4480), 0x60, add(transcript, 0x4480), 0x40), 1), success)mstore(add(transcript, 0x44e0), mload(add(transcript, 0x4400)))                    mstore(add(transcript, 0x4500), mload(add(transcript, 0x4420)))mstore(add(transcript, 0x4520), mload(add(transcript, 0x4480)))                    mstore(add(transcript, 0x4540), mload(add(transcript, 0x44a0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x44e0), 0x80, add(transcript, 0x44e0), 0x40), 1), success)mstore(add(transcript, 0x4560), 0x1fa82a9e536e3f2c8da02cff0dab4c210fd28cf03e76386b51f23624883b78f6)                    mstore(add(transcript, 0x4580), 0x01eb87f4eb02e8585efec5017bab794f6207dfa77b5c0968bfdc17d85a9a5104)mstore(add(transcript, 0x45a0), mload(add(transcript, 0x3d40)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4560), 0x60, add(transcript, 0x4560), 0x40), 1), success)mstore(add(transcript, 0x45c0), mload(add(transcript, 0x44e0)))                    mstore(add(transcript, 0x45e0), mload(add(transcript, 0x4500)))mstore(add(transcript, 0x4600), mload(add(transcript, 0x4560)))                    mstore(add(transcript, 0x4620), mload(add(transcript, 0x4580)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x45c0), 0x80, add(transcript, 0x45c0), 0x40), 1), success)mstore(add(transcript, 0x4640), 0x1bb084c273eb383b75e9512a6570f93cc3c617ff27b27ee405da12321c40c7c0)                    mstore(add(transcript, 0x4660), 0x2a0f7aa31aba54f8e123a89572abc7524066828207cdfbca7c6b13e87fa8464b)mstore(add(transcript, 0x4680), mload(add(transcript, 0x3d60)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4640), 0x60, add(transcript, 0x4640), 0x40), 1), success)mstore(add(transcript, 0x46a0), mload(add(transcript, 0x45c0)))                    mstore(add(transcript, 0x46c0), mload(add(transcript, 0x45e0)))mstore(add(transcript, 0x46e0), mload(add(transcript, 0x4640)))                    mstore(add(transcript, 0x4700), mload(add(transcript, 0x4660)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x46a0), 0x80, add(transcript, 0x46a0), 0x40), 1), success)mstore(add(transcript, 0x4720), 0x2d331430c5479218c4f9e7788547e08f11de3cd31f2dd3dd7363c894adde1164)                    mstore(add(transcript, 0x4740), 0x23199345ef6e7c823a4afc60e46b6585e38a671b7c53065af5e9c80e8ae2da19)mstore(add(transcript, 0x4760), mload(add(transcript, 0x3d80)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4720), 0x60, add(transcript, 0x4720), 0x40), 1), success)mstore(add(transcript, 0x4780), mload(add(transcript, 0x46a0)))                    mstore(add(transcript, 0x47a0), mload(add(transcript, 0x46c0)))mstore(add(transcript, 0x47c0), mload(add(transcript, 0x4720)))                    mstore(add(transcript, 0x47e0), mload(add(transcript, 0x4740)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4780), 0x80, add(transcript, 0x4780), 0x40), 1), success)mstore(add(transcript, 0x4800), 0x28b0e7c0de6279220cf762f9591eac84f1c7b1a5ae7f235c32a252c6c794ac79)                    mstore(add(transcript, 0x4820), 0x2bd6ee2c8ccb2dc5c50e23ac1c020e9406d202282ec53ebacdc15b62112d814f)mstore(add(transcript, 0x4840), mload(add(transcript, 0x3da0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4800), 0x60, add(transcript, 0x4800), 0x40), 1), success)mstore(add(transcript, 0x4860), mload(add(transcript, 0x4780)))                    mstore(add(transcript, 0x4880), mload(add(transcript, 0x47a0)))mstore(add(transcript, 0x48a0), mload(add(transcript, 0x4800)))                    mstore(add(transcript, 0x48c0), mload(add(transcript, 0x4820)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4860), 0x80, add(transcript, 0x4860), 0x40), 1), success)mstore(add(transcript, 0x48e0), 0x28eecbf7ed3a8f5706478f09a20e406c847406a36c9a2c6aab3401b4d5b54eb3)                    mstore(add(transcript, 0x4900), 0x25bd2c9d6cc0424f1d3f33f837a382b273053a725a415d625ba6307ad19d37a4)mstore(add(transcript, 0x4920), mload(add(transcript, 0x3dc0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x48e0), 0x60, add(transcript, 0x48e0), 0x40), 1), success)mstore(add(transcript, 0x4940), mload(add(transcript, 0x4860)))                    mstore(add(transcript, 0x4960), mload(add(transcript, 0x4880)))mstore(add(transcript, 0x4980), mload(add(transcript, 0x48e0)))                    mstore(add(transcript, 0x49a0), mload(add(transcript, 0x4900)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4940), 0x80, add(transcript, 0x4940), 0x40), 1), success)mstore(add(transcript, 0x49c0), 0x18f9ed620a83b11236aa0f84eb92e0dd2f028c39217a5bd6d5dde8e7a47aabfe)                    mstore(add(transcript, 0x49e0), 0x065a6a7ab3ada6a213695441f022d06b09fb401f1935b0355c53f6a4752a9645)mstore(add(transcript, 0x4a00), mload(add(transcript, 0x3de0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x49c0), 0x60, add(transcript, 0x49c0), 0x40), 1), success)mstore(add(transcript, 0x4a20), mload(add(transcript, 0x4940)))                    mstore(add(transcript, 0x4a40), mload(add(transcript, 0x4960)))mstore(add(transcript, 0x4a60), mload(add(transcript, 0x49c0)))                    mstore(add(transcript, 0x4a80), mload(add(transcript, 0x49e0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4a20), 0x80, add(transcript, 0x4a20), 0x40), 1), success)mstore(add(transcript, 0x4aa0), 0x0dc75a82948975b4d7a320858d7d1b9f65fadbc141ea0d8432801c1ab1314601)                    mstore(add(transcript, 0x4ac0), 0x151ee4ec67618729e3fc769f8ff07490cab797485ebb1499004554991635e5a4)mstore(add(transcript, 0x4ae0), mload(add(transcript, 0x3e00)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4aa0), 0x60, add(transcript, 0x4aa0), 0x40), 1), success)mstore(add(transcript, 0x4b00), mload(add(transcript, 0x4a20)))                    mstore(add(transcript, 0x4b20), mload(add(transcript, 0x4a40)))mstore(add(transcript, 0x4b40), mload(add(transcript, 0x4aa0)))                    mstore(add(transcript, 0x4b60), mload(add(transcript, 0x4ac0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4b00), 0x80, add(transcript, 0x4b00), 0x40), 1), success)mstore(add(transcript, 0x4b80), 0x2fcd03294499e49b2a6d9737402b85f8e096ba77242d167e8b0c61ca17caab82)                    mstore(add(transcript, 0x4ba0), 0x172c75981bddb909bdbb6ed87d6a236e8af6c8a0f60d6c10a5d521e8915dc7f0)mstore(add(transcript, 0x4bc0), mload(add(transcript, 0x3e20)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4b80), 0x60, add(transcript, 0x4b80), 0x40), 1), success)mstore(add(transcript, 0x4be0), mload(add(transcript, 0x4b00)))                    mstore(add(transcript, 0x4c00), mload(add(transcript, 0x4b20)))mstore(add(transcript, 0x4c20), mload(add(transcript, 0x4b80)))                    mstore(add(transcript, 0x4c40), mload(add(transcript, 0x4ba0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4be0), 0x80, add(transcript, 0x4be0), 0x40), 1), success)mstore(add(transcript, 0x4c60), 0x12c7efea7624f9e30ff32c0744bbf707b2aa7b39d338578c054363dd218a7246)                    mstore(add(transcript, 0x4c80), 0x15287c41a606a77c68de63f6adf56b4dc24054528b4c8cfba02c796fe59f2876)mstore(add(transcript, 0x4ca0), mload(add(transcript, 0x3e40)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4c60), 0x60, add(transcript, 0x4c60), 0x40), 1), success)mstore(add(transcript, 0x4cc0), mload(add(transcript, 0x4be0)))                    mstore(add(transcript, 0x4ce0), mload(add(transcript, 0x4c00)))mstore(add(transcript, 0x4d00), mload(add(transcript, 0x4c60)))                    mstore(add(transcript, 0x4d20), mload(add(transcript, 0x4c80)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4cc0), 0x80, add(transcript, 0x4cc0), 0x40), 1), success)mstore(add(transcript, 0x4d40), 0x1002486e556a49b95dd31f0a27eefe35dcd207097618a472741df3c150d9041f)                    mstore(add(transcript, 0x4d60), 0x0a22c62a87f733600bd8d1874e15b92854f15a963ab13aec437061a2ade214ed)mstore(add(transcript, 0x4d80), mload(add(transcript, 0x3e60)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4d40), 0x60, add(transcript, 0x4d40), 0x40), 1), success)mstore(add(transcript, 0x4da0), mload(add(transcript, 0x4cc0)))                    mstore(add(transcript, 0x4dc0), mload(add(transcript, 0x4ce0)))mstore(add(transcript, 0x4de0), mload(add(transcript, 0x4d40)))                    mstore(add(transcript, 0x4e00), mload(add(transcript, 0x4d60)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4da0), 0x80, add(transcript, 0x4da0), 0x40), 1), success)mstore(add(transcript, 0x4e20), 0x057532138b13bb66fe8fcd3765d054d5635436ed71fe81a858eac5c0d64ab7c0)                    mstore(add(transcript, 0x4e40), 0x1714ec5249b624993cb7f228489d9bc3ca8c2c2697b1fdc3c564749e1e1c6128)mstore(add(transcript, 0x4e60), mload(add(transcript, 0x3e80)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4e20), 0x60, add(transcript, 0x4e20), 0x40), 1), success)mstore(add(transcript, 0x4e80), mload(add(transcript, 0x4da0)))                    mstore(add(transcript, 0x4ea0), mload(add(transcript, 0x4dc0)))mstore(add(transcript, 0x4ec0), mload(add(transcript, 0x4e20)))                    mstore(add(transcript, 0x4ee0), mload(add(transcript, 0x4e40)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4e80), 0x80, add(transcript, 0x4e80), 0x40), 1), success)mstore(add(transcript, 0x4f00), 0x0955b8ffe66e2b6e42a04d0a4d76ae1b9f129d9aa1e02180e2a94f84f82d6329)                    mstore(add(transcript, 0x4f20), 0x04bbd06d54bc05e02b8fb23657963d4f733929547f290ac91b68904411286a04)mstore(add(transcript, 0x4f40), mload(add(transcript, 0x3ea0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4f00), 0x60, add(transcript, 0x4f00), 0x40), 1), success)mstore(add(transcript, 0x4f60), mload(add(transcript, 0x4e80)))                    mstore(add(transcript, 0x4f80), mload(add(transcript, 0x4ea0)))mstore(add(transcript, 0x4fa0), mload(add(transcript, 0x4f00)))                    mstore(add(transcript, 0x4fc0), mload(add(transcript, 0x4f20)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x4f60), 0x80, add(transcript, 0x4f60), 0x40), 1), success)mstore(add(transcript, 0x4fe0), mload(add(transcript, 0x380)))                    mstore(add(transcript, 0x5000), mload(add(transcript, 0x3a0)))mstore(add(transcript, 0x5020), mload(add(transcript, 0x3ec0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x4fe0), 0x60, add(transcript, 0x4fe0), 0x40), 1), success)mstore(add(transcript, 0x5040), mload(add(transcript, 0x4f60)))                    mstore(add(transcript, 0x5060), mload(add(transcript, 0x4f80)))mstore(add(transcript, 0x5080), mload(add(transcript, 0x4fe0)))                    mstore(add(transcript, 0x50a0), mload(add(transcript, 0x5000)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x5040), 0x80, add(transcript, 0x5040), 0x40), 1), success)mstore(add(transcript, 0x50c0), mload(add(transcript, 0x3c0)))                    mstore(add(transcript, 0x50e0), mload(add(transcript, 0x3e0)))mstore(add(transcript, 0x5100), mload(add(transcript, 0x3ee0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x50c0), 0x60, add(transcript, 0x50c0), 0x40), 1), success)mstore(add(transcript, 0x5120), mload(add(transcript, 0x5040)))                    mstore(add(transcript, 0x5140), mload(add(transcript, 0x5060)))mstore(add(transcript, 0x5160), mload(add(transcript, 0x50c0)))                    mstore(add(transcript, 0x5180), mload(add(transcript, 0x50e0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x5120), 0x80, add(transcript, 0x5120), 0x40), 1), success)mstore(add(transcript, 0x51a0), mload(add(transcript, 0x400)))                    mstore(add(transcript, 0x51c0), mload(add(transcript, 0x420)))mstore(add(transcript, 0x51e0), mload(add(transcript, 0x3f00)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x51a0), 0x60, add(transcript, 0x51a0), 0x40), 1), success)mstore(add(transcript, 0x5200), mload(add(transcript, 0x5120)))                    mstore(add(transcript, 0x5220), mload(add(transcript, 0x5140)))mstore(add(transcript, 0x5240), mload(add(transcript, 0x51a0)))                    mstore(add(transcript, 0x5260), mload(add(transcript, 0x51c0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x5200), 0x80, add(transcript, 0x5200), 0x40), 1), success)mstore(add(transcript, 0x5280), mload(add(transcript, 0x440)))                    mstore(add(transcript, 0x52a0), mload(add(transcript, 0x460)))mstore(add(transcript, 0x52c0), mload(add(transcript, 0x3f20)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x5280), 0x60, add(transcript, 0x5280), 0x40), 1), success)mstore(add(transcript, 0x52e0), mload(add(transcript, 0x5200)))                    mstore(add(transcript, 0x5300), mload(add(transcript, 0x5220)))mstore(add(transcript, 0x5320), mload(add(transcript, 0x5280)))                    mstore(add(transcript, 0x5340), mload(add(transcript, 0x52a0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x52e0), 0x80, add(transcript, 0x52e0), 0x40), 1), success)mstore(add(transcript, 0x5360), mload(add(transcript, 0x480)))                    mstore(add(transcript, 0x5380), mload(add(transcript, 0x4a0)))mstore(add(transcript, 0x53a0), mload(add(transcript, 0x3f40)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x5360), 0x60, add(transcript, 0x5360), 0x40), 1), success)mstore(add(transcript, 0x53c0), mload(add(transcript, 0x52e0)))                    mstore(add(transcript, 0x53e0), mload(add(transcript, 0x5300)))mstore(add(transcript, 0x5400), mload(add(transcript, 0x5360)))                    mstore(add(transcript, 0x5420), mload(add(transcript, 0x5380)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x53c0), 0x80, add(transcript, 0x53c0), 0x40), 1), success)mstore(add(transcript, 0x5440), mload(add(transcript, 0x2e0)))                    mstore(add(transcript, 0x5460), mload(add(transcript, 0x300)))mstore(add(transcript, 0x5480), mload(add(transcript, 0x3f60)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x5440), 0x60, add(transcript, 0x5440), 0x40), 1), success)mstore(add(transcript, 0x54a0), mload(add(transcript, 0x53c0)))                    mstore(add(transcript, 0x54c0), mload(add(transcript, 0x53e0)))mstore(add(transcript, 0x54e0), mload(add(transcript, 0x5440)))                    mstore(add(transcript, 0x5500), mload(add(transcript, 0x5460)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x54a0), 0x80, add(transcript, 0x54a0), 0x40), 1), success)mstore(add(transcript, 0x5520), mload(add(transcript, 0x260)))                    mstore(add(transcript, 0x5540), mload(add(transcript, 0x280)))mstore(add(transcript, 0x5560), mload(add(transcript, 0x4060)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x5520), 0x60, add(transcript, 0x5520), 0x40), 1), success)mstore(add(transcript, 0x5580), mload(add(transcript, 0x54a0)))                    mstore(add(transcript, 0x55a0), mload(add(transcript, 0x54c0)))mstore(add(transcript, 0x55c0), mload(add(transcript, 0x5520)))                    mstore(add(transcript, 0x55e0), mload(add(transcript, 0x5540)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x5580), 0x80, add(transcript, 0x5580), 0x40), 1), success)mstore(add(transcript, 0x5600), mload(add(transcript, 0x2a0)))                    mstore(add(transcript, 0x5620), mload(add(transcript, 0x2c0)))mstore(add(transcript, 0x5640), mload(add(transcript, 0x4160)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x5600), 0x60, add(transcript, 0x5600), 0x40), 1), success)mstore(add(transcript, 0x5660), mload(add(transcript, 0x5580)))                    mstore(add(transcript, 0x5680), mload(add(transcript, 0x55a0)))mstore(add(transcript, 0x56a0), mload(add(transcript, 0x5600)))                    mstore(add(transcript, 0x56c0), mload(add(transcript, 0x5620)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x5660), 0x80, add(transcript, 0x5660), 0x40), 1), success)mstore(add(transcript, 0x56e0), mload(add(transcript, 0x920)))                    mstore(add(transcript, 0x5700), mload(add(transcript, 0x940)))mstore(add(transcript, 0x5720), sub(f_q, mload(add(transcript, 0x41a0))))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x56e0), 0x60, add(transcript, 0x56e0), 0x40), 1), success)mstore(add(transcript, 0x5740), mload(add(transcript, 0x5660)))                    mstore(add(transcript, 0x5760), mload(add(transcript, 0x5680)))mstore(add(transcript, 0x5780), mload(add(transcript, 0x56e0)))                    mstore(add(transcript, 0x57a0), mload(add(transcript, 0x5700)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x5740), 0x80, add(transcript, 0x5740), 0x40), 1), success)mstore(add(transcript, 0x57c0), mload(add(transcript, 0x9c0)))                    mstore(add(transcript, 0x57e0), mload(add(transcript, 0x9e0)))mstore(add(transcript, 0x5800), mload(add(transcript, 0x41c0)))success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x57c0), 0x60, add(transcript, 0x57c0), 0x40), 1), success)mstore(add(transcript, 0x5820), mload(add(transcript, 0x5740)))                    mstore(add(transcript, 0x5840), mload(add(transcript, 0x5760)))mstore(add(transcript, 0x5860), mload(add(transcript, 0x57c0)))                    mstore(add(transcript, 0x5880), mload(add(transcript, 0x57e0)))success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x5820), 0x80, add(transcript, 0x5820), 0x40), 1), success)mstore(add(transcript, 0x58a0), mload(add(transcript, 0x5820)))                    mstore(add(transcript, 0x58c0), mload(add(transcript, 0x5840)))mstore(add(transcript, 0x58e0), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(add(transcript, 0x5900), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(add(transcript, 0x5920), 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(add(transcript, 0x5940), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(add(transcript, 0x5960), mload(add(transcript, 0x9c0)))                    mstore(add(transcript, 0x5980), mload(add(transcript, 0x9e0)))mstore(add(transcript, 0x59a0), 0x012c30ded30fa90d24d5b9490145d85678a2d6ef8c8ba56fba45a475f9825482)            mstore(add(transcript, 0x59c0), 0x0846cbb55484de7aba426d01e206392c095358d156876426f09e9a3bea707983)            mstore(add(transcript, 0x59e0), 0x14d783a1c882597c52ec2226441b1bc42ff14824358f40233e93c005963565b8)            mstore(add(transcript, 0x5a00), 0x1027d51c1c04676d5a92126a93c26917312c20bcba6920719514332cfb9da673)success := and(eq(staticcall(gas(), 0x8, add(transcript, 0x58a0), 0x180, add(transcript, 0x58a0), 0x20), 1), success)success := and(eq(mload(add(transcript, 0x58a0)), 1), success)} return success; } }
